{
  "hash": "338068cb0eb7420e074e5370b6f1843b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Qualitative approach to topology generators\nauthor: Tanya Strydom\nbibliography: ../references.bib\n---\n\n\n\n\n## Venn Diagram\n\nHere we will use the standard [REF FOR TIDYVERSE] and @gaoGgVennDiagramIntuitiveEasytoUse2021 to create a venn diagram for the quantitative portion of or generator/model overview process. Also remember to drop the R version (maybe also look into if you can `renv` this because we aim for reproducibility)\n\n\n\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\n#| include: false\n#| message: false\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| include: false\n#| message: false\nlibrary(ggVennDiagram)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'ggVennDiagram'\n\nThe following object is masked from 'package:tidyr':\n\n    unite\n```\n\n\n:::\n:::\n\n\n\n\n\nFirst we need to create the df with the relevant 'traits' for each model\n\n\n\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\n#| include: false\n\nx <- list(Niche=c(\"species agnostic\", \"structural\", \"synthetic network\"),\n          ADBM=c(\"node-level\", \"mechanistic\"),\n          Transfer=c(\"node-level\", \"embedding\", \"metaweb\"),\n          PFIM=c(\"node-level\", \"mechanistic\", \"metaweb\"),\n          Cascade=c(\"species agnostic\", \"structural\", \"synthetic network\"))\n\nvenn <- Venn(x)\ndata <- process_data(venn)\n```\n:::\n\n\n\n\nCreate venn diagram:\n\n\n\n\n::: {#cell-fig-venn .cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| label: fig-venn\n#| fig-cap: \"Venn diagram for qualitative analysis/overview of the fancy maths things\"\n#| fig-alt: \"TODO\"\nggVennDiagram(x, \n              label = \"none\") +\n  theme_void() +\n  theme(legend.position = 'none')\n```\n\n::: {.cell-output-display}\n![Venn diagram for qualitative analysis/overview of the fancy maths things](model_qualitative_files/figure-jats/fig-venn-1.png){#fig-venn fig-alt='TODO'}\n:::\n:::\n\n\n\n\nLooking at it now I don't think this is the wayTM and trying to sort of 'ordinate' modelling space might actually be more meaningful... Specifically thinking here that I need to also actually just read about model comparison (but without the performance aspect)\n\n## Ordination approach\n\nSo at least according to @mccuneAnalysisEcologicalCommunities2002 we should be able to ordinate using only categorical data although we should stick to an NMDS. Its just going to be a case of encoding said categories correctly. How I see it is that each category that we 'create' will be its own entry (we could maybe also just turn each category into a factor but this comes at the cost of assuming the distribution of said variable, well that's what I infer form my 2 minute skim read).\n\n## References {.unnumbered}\n\n::: {#refs}\n:::",
    "supporting": [
      "model_qualitative_files/figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}