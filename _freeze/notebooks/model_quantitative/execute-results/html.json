{
  "hash": "ae314580571badc48da1ac19d9615944",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SuppMat 3: Benchmarking the different model families\"\nauthors:\n  - name: Tanya Strydom\n    id: ts\n    orcid: 0000-0001-6067-1349\ndate: last-modified\nbibliography: ../references.bib\n---\n\n\nThis notebook is going to visualise and further describe the process of benchmarking the different model families. The core code used to download, clean, and summarise the different networks can be found at the following repository [BecksLab/topology_generators](https://github.com/BecksLab/topology_generators).\n\n## Datasets used\n\nNote that not all datasets are suitable for use with all model families - this is primarily because some of the model families require a lot more additional (external) data and we cannot feasibly do this for all of the available datasets. Conversely for some of the 'data light' models it is of course possible to use many networks and create a large sample of networks. Below we will introduce three broader groups of datasets and in the table below we show for which families we used which datasets.\n\n| Model family       | Mangal | New Zealand | Empirical |\n|--------------------|--------|-------------|-----------|\n| null               | Yes    | yes         | yes       |\n| neutral            |        | yes         | yes       |\n| resource           | Yes    | yes         | yes       |\n| generative         | Yes    | yes         | yes       |\n| energetic          |        | yes         | yes       |\n| graph embedding    |        |             | yes       |\n| trait matching     |        |             | yes       |\n| binary classifiers |        |             | yes       |\n| expert knowledge   |        |             | yes       |\n| data scavenging    |        |             | yes       |\n| co-occurrence      |        |             | yes       |\n\n: Different model families and the datasets from which we are able to generate networks that we can use for benchmarking. {#tbl-datasets}\n\n### Mangal networks\n\nWe queried the Mangal [@poisotMangalMakingEcological2016] database and extracted a total of **TODO** networks. \\[*Some sort of summary as to the geographic/taxonomic range??\\]* Although these networks represent a high volume of interaction data they do not have accompanying 'metadata' that we would need for some of the more data-hungry model families (*e.g.,* local abundance), the Mangal networks were used to provide the 'starting values' for the random, resource, and generative families. This allows us to generate a large number of different networks that we can use to compare and contrast the performance of the various model families. For each network from Mangal we generated **TODO** versions of that network using each model family.\n\n> \"These complex food webs differ in their level of resolution and sampling effort, which may introduce noise in the estimation of their properties, especially given their large number of interacting elements. However, because our MaxEnt models are applied on imperfect data, they aim at reproducing the sampled structure of food webs, not their actual structure.\" - @banvilleWhatConstrainsFood2023 (something to think about...)\n\n### New Zealand dataset\n\nData from @pomeranzInferringPredatorPrey2019. **TODO** quick outline of what the dataset entails...\n\n### Empirical networks\n\n\n> Here I think we need to span a variety of domains, at minimum aquatic and terrestrial but maybe there should be a 'scale' element as well *i.e.,* a regional and local network. I think there is going to be a 'turning point' where structural will take over from mechanistic in terms of performance. More specifically at local scales bioenergetic constraints (and co-occurrence) may play a bigger role in structuring a network whereas at the metaweb level then mechanistic may make more (since by default its about who can potentially interact and obviously not constrained by real-world scenarios) *sensu* @caronTraitmatchingModelsPredict2024. Although having said that I feel that contradicts the idea of backbones (*sensu* Bramon Mora (sp?) et al & Stouffer et al) But that might be where we get the idea of core *structure* vs something like linkage density. So core things like trophic level/chain length will be conserved but connectance might not (I think I understand what I'm trying to say here)\n\n## Predicting models\n\nFor each model and network combination we predicted the model **TODO** number of times - this allows us to capture some of the inherent variability (and stochasticity) that we would expect from some of the models.\n\n## Model benchmarking\n\nSome of the considerations one needs to make when wanting to benchmark models is discussed in Box 2 of the main text. The different benchmarking summary statistics that we are collecting are as follows:\n\nFor 'structure':\n\n-   **Links:** to determine if the number of links are 'correct' we use *connectance*\n\n-   *Shape:* to determine if the 'shape' of the network is correct we are looking at the ratio of 'top':'basal' species (where 'top' species are those that have a vulnerability of 0 and 'basal' species have a generality of 0) as well as the distance to base from one of the top species (this will represent the shortest path but a large discrepancy between the real and predicted network would be indicative that the model is not predicting a similar 'shape'). This will allow is to see if the models construct tall 'pencil' vs flat 'pancake' networks (Beckerman 2024, pers comms).\n\n    -   A small (\\< 1) number will thus be indicative of a 'bottom-heavy' network and the opposite for larger numbers\n\n-   **Structure:** to determine if we are capturing some higher level of 'structure' we are using SVD entropy [@strydomSVDEntropyReveals2021]\n\n-   *Motifs:* We can estract the motifs identified by @stoufferEvidenceExistenceRobust2007, namely:\n\n    -   S1: Number of linear chains\n\n    -   S2: Number of omnivory motifs\n\n    -   S4: Number of apparent competition motifs\n\n    -   S5: Number of direct competition motifs\n\nFor interactions:\n\nBased on @poisotGuidelinesPredictionSpecies2023:\n-   Precision-Recall (PR-AUC) - performance \n-   Matthews correlation coefficient (MCC) - accuracy\n\n## Visualising results\n\nNow it is time to visualise the data\n\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\n#| include: false\n#| warning: false\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| include: false\n#| warning: false\nlibrary(patchwork)\n\n# function for radar plots\ncoord_radar <- function (theta = \"x\", start = 0, direction = 1) {\n    theta <- match.arg(theta, c(\"x\", \"y\"))\n    r <- if (theta == \"x\") \"y\" else \"x\"\n    ggproto(\"CordRadar\", CoordPolar, theta = theta, r = r, start = start, \n            direction = sign(direction),\n            is_linear = function(coord) TRUE)\n}\n\n# download file from other repo\ndownload.file(\"https://raw.githubusercontent.com/BecksLab/topology_generators/main/data/processed/topology_summary.csv\", \"../notebooks/data/topology_models.csv\")\ndownload.file(\"https://raw.githubusercontent.com/BecksLab/topology_generators/main/data/processed/mangal_summary.csv\", \"../notebooks/data/mangal_summary.csv\")\ndownload.file(\"https://raw.githubusercontent.com/BecksLab/topology_generators/main/data/processed/nz_summary.csv\", \"../notebooks/data/nz_summary.csv\")\n\n\ndf = full_join(rbind(read.csv(\"data/mangal_summary.csv\"),\n                     read.csv(\"data/nz_summary.csv\")),\n                read.csv(\"data/topology_models.csv\")) %>% \n        filter(complexity != 0) %>% \n        # to get the ratio\n        mutate(ratio = top/basal,\n                top = NULL,\n                basal = NULL,\n                ratio_mod = top_mod/basal_mod,\n                top_mod = NULL,\n                basal_mod = NULL) %>%\n        pivot_longer(\n            cols = c(complexity, distance, connectance, ratio, S1, S2, S4, S5), \n            names_to = \"real\",\n            values_to = \"real_val\")  %>% \n        pivot_longer(\n            cols = c(complexity_mod, distance_mod, connectance_mod, ratio_mod, S1_mod, S2_mod, S4_mod, S5_mod), \n            names_to = \"test\",\n            values_to = \"model_val\")  %>% \n        mutate(\n            real = str_extract(real, \"[^_]*\"),\n            test = str_extract(test, \"[^_]*\"))  %>% \n        filter(real == test) %>%\n        ungroup() %>% \n        filter(model_val != Inf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n:::\n\n\nLets start by summarising the 'raw' data as box plots just to see what it looks like before we try and do a more streamlines summary\n\n\n::: {#cell-fig-boxplot .cell}\n\n```{.r .cell-code .hidden}\n#| warning: false\n#| echo: false\n#| label: fig-boxplot\n#| fig-cap: \"Boxplot looking at raw values for each measurement for each model. The horizontal line represents the true overall mean for each measurement\"\n\nggplot(df) +\n#  geom_jitter(aes(x = model,\n#                 y = model_val,\n#                 colour = model),\n#             alpha = 0.4,\n#             fill = \"#ffffff00\", \n#             stroke = 0.2,\n#             width = 0.25,\n#             shape = 21) +\n    geom_boxplot(aes(x = model,\n                    y = model_val,\n                    colour = model),\n                fill = \"#ffffff00\") +\n    geom_hline(data = df  %>% \n                        group_by(real)  %>% \n                        reframe(mu_sim = mean(model_val, na.rm = TRUE)),\n                aes(yintercept = mu_sim),\n                alpha = 0.7) +\n    facet_wrap(vars(real),\n                scales = 'free') +\n    scale_size(guide = 'none') +\n    theme_classic() +\n    theme(panel.border = element_rect(colour = 'black',\n                                      fill = \"#ffffff00\"),\n            axis.text.x = element_blank(),\n            axis.ticks.x = element_blank())\n```\n\n::: {.cell-output-display}\n![Boxplot looking at raw values for each measurement for each model. The horizontal line represents the true overall mean for each measurement](model_quantitative_files/figure-html/fig-boxplot-1.png){#fig-boxplot width=672}\n:::\n:::\n\n\nNow we can look at the difference between the mean of the real network property and the simulated one. I had originally considered using the $Z$-score but it doesn't work well for the more 'deterministic' models (neutral and ADBM) because they effectively have a $\\sigma$ of zero... so we are just looking at the difference between the real value and the mean predicted value for each network.\n\n\n::: {#cell-fig-topology .cell}\n\n```{.r .cell-code .hidden}\n#| warning: false\n#| echo: false\n#| label: fig-topology\n#| fig-cap: \"Difference between real and model network property. S1 - S5 represent the different motif structures identified in @stoufferEvidenceExistenceRobust2007.\"\n\nggplot(df %>% \n        group_by(id, real, model)  %>% \n        reframe(x_real = real_val,\n                mu_sim = mean(model_val, na.rm = TRUE),\n                sd_sim = sd(model_val, na.rm = TRUE)) %>%\n        mutate(z_score = (x_real-mu_sim)) %>%\n        distinct()) +\n    geom_vline(aes(xintercept = 0)) +\n    geom_histogram(aes(x = z_score,\n                    fill = model),\n                colour = \"#ffffff00\") +\n    facet_grid(rows = vars(model),\n                cols = vars(real),\n                scales = \"free\") +\n    scale_size(guide = 'none') +\n    coord_cartesian(expand = FALSE) +\n    theme_classic() +\n    theme(panel.border = element_rect(colour = 'black',\n                                      fill = \"#ffffff00\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| warning: false\n#| echo: false\n#| label: fig-topology\n#| fig-cap: \"Difference between real and model network property. S1 - S5 represent the different motif structures identified in @stoufferEvidenceExistenceRobust2007.\"\n\nggsave(\"../images/topology.png\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Difference between real and model network property. S1 - S5 represent the different motif structures identified in @stoufferEvidenceExistenceRobust2007.](model_quantitative_files/figure-html/fig-topology-1.png){#fig-topology width=672}\n:::\n:::\n\n::: {#cell-fig-spider .cell}\n\n```{.r .cell-code .hidden}\n#| warning: false\n#| echo: false\n#| label: fig-spider\n#| fig-cap: \"I was experimenting with radial plots... its not going well...\"\n\nggplot(df %>% \n        pivot_longer(\n                    cols = c(real_val, model_val),\n                    names_to = \"grp\",\n                    values_to = \"value\",\n                    values_drop_na = TRUE) %>%\n        group_by(real, model, grp)  %>% \n        reframe(mean = mean(value, na.rm = TRUE)) %>%\n        distinct(),\n        aes(x = real,\n            y = mean,\n            group = model,\n            colour = model)) +\n    geom_line() +\n    coord_radar() +\n    facet_wrap(vars(model)) + \n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![I was experimenting with radial plots... its not going well...](model_quantitative_files/figure-html/fig-spider-1.png){#fig-spider width=672}\n:::\n:::\n\n\n## References {.unnumbered}\n\n::: {#refs}\n:::",
    "supporting": [
      "model_quantitative_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}